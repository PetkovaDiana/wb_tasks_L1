package main

import (
	"fmt"
	"sync"
)

/*
Разработать конвейер чисел.
Даны два канала: в первый пишутся числа (x) из массива, во второй — результат операции x*2,
после чего данные из второго канала должны выводиться в stdout.
*/

func main() {
	var wg sync.WaitGroup   // Создаем группу ожидания для синхронизации горутин
	ch := make(chan int)    // Создаем канал для записи чисел из массива
	chOut := make(chan int) // Создаем канал для вывода результатов операции

	arr := []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10} // Массив чисел, которые будут обработаны

	// Запускаем горутину для выполнения операции над числами
	square(&wg, ch, chOut)
	// Запускаем горутину для чтения результатов из второго канала и вывода их на экран
	read(&wg, chOut)

	// Записываем числа из массива в первый канал
	for _, val := range arr {
		ch <- val
	}
	close(ch) // Закрываем первый канал, чтобы сигнализировать о завершении отправки данных

	wg.Wait() // Ожидаем завершения всех горутин
}

// Функция для выполнения операции над числами (квадрат числа) и отправки результатов во второй канал
func square(wg *sync.WaitGroup, ch <-chan int, chOut chan<- int) {
	wg.Add(1) // Увеличиваем счетчик группы ожидания
	go func() {
		defer wg.Done()       // Уменьшаем счетчик группы ожидания при завершении горутины
		for val := range ch { // Читаем значения из первого канала
			res := val * val // Вычисляем квадрат числа
			chOut <- res     // Отправляем результат во второй канал
		}
		close(chOut) // Закрываем второй канал после завершения обработки всех данных
	}()
}

// Функция для чтения результатов из второго канала и вывода их на экран
func read(wg *sync.WaitGroup, chOut <-chan int) {
	wg.Add(1) // Увеличиваем счетчик группы ожидания
	go func() {
		defer wg.Done()          // Уменьшаем счетчик группы ожидания при завершении горутины
		for val := range chOut { // Читаем значения из второго канала
			fmt.Println(val) // Выводим результат на экран
		}
	}()
}
