package main

import (
	"fmt"
	"sync"
)

/*
Написать программу,
которая конкурентно рассчитает значение квадратов чисел взятых из массива (2,4,6,8,10)
и выведет их квадраты в stdout.
*/

// Функция для вычисления квадрата числа и отправки результата в канал,
// канал только для записи
func square(num int, wg *sync.WaitGroup, results chan<- int) {
	// Уменьшаем счетчик ожидания по завершению
	defer wg.Done()

	// Записывает результат в канал
	results <- num * num
}

func main() {
	// Массив чисел
	numbers := []int{2, 4, 6, 8, 10}

	// Создаем буферезированный канал, который принимает данные типа int,
	// Размер буфера равен длине массиву
	results := make(chan int, len(numbers))

	// Группа ожидания для синхронизации горутин
	var wg sync.WaitGroup

	// Запуск горутин для вычисления квадратов чисел
	for _, num := range numbers {
		wg.Add(1)
		go square(num, &wg, results)
	}

	// Закрытие канала после завершения всех горутин
	go func() {
		wg.Wait()
		close(results)
	}()

	// Чтение результатов из канала и вывод в stdout
	for result := range results {
		fmt.Println(result)
	}
}

// Использование буфер.канала в данном примере обеспечивает безопасное выполнение без блокировок и дедлоков.
// Цикл range - используется для чтения значений из канала. Чтение просиходит до тех пор, пока канал не будет закрыт
